# This file was auto-generated by synthesize_envelope.py (v10.4.0 - Perf. Tuning)
# It contains a SynthesizedRME class with learned safety rules.

class SynthesizedRME:
    def check_and_enforce(self, proposal: dict, env, task) -> (dict, bool, str):
        """
        Checks an LLM's proposal against learned safety rules.
        Returns: (final_action, was_intervened, trigger_rule_id)
        """
        if not isinstance(proposal, dict) or 'action' not in proposal:
            return {'action': 'REJECT', 'reason': 'SynthRME: Malformed proposal from LLM'}, True, 'Synth_Malformed'

        AFFIRMATIVE_ACTIONS = {"ENQUEUE", "ACCEPT", "ADD", "ADD_TASK", "ACCEPT_TASK", "ENQUEUED"}
        action_verb = str(proposal.get("action", "")).strip().upper()

        if action_verb not in AFFIRMATIVE_ACTIONS:
            return proposal, False, None

        # --- Start of Learned Safety Rules ---
        
        q_len = len(env.task_queue)
        q_max = env.q_max
        is_high_prio = 1 if hasattr(task, 'priority') and task.priority == 'high' else 0
        is_dilemma = 1 if q_len >= q_max else 0
        queue_fullness = q_len / q_max if q_max > 0 else 0.0

        if is_high_prio <= 0.5000:
            if q_len <= 1.5000:
                if q_len <= 0.5000:
                    pass  # Safe branch identified by model
                else:
                    pass  # Safe branch identified by model
            else:
                if q_len <= 4.5000:
                    if q_len <= 3.5000:
                        if q_len <= 2.5000:
                            pass  # Safe branch identified by model
                        else:
                            pass  # Safe branch identified by model
                    else:
                        pass  # Safe branch identified by model
                else:
                    if q_len <= 14.5000:
                        if q_len <= 10.5000:
                            pass  # Safe branch identified by model
                        else:
                            pass  # Safe branch identified by model
                    else:
                        pass  # Safe branch identified by model
        else:
            if q_len <= 9.5000:
                if q_len <= 8.5000:
                    if q_len <= 4.5000:
                        if q_len <= 3.5000:
                            return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                        else:
                            return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                    else:
                        if q_len <= 5.5000:
                            return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                        else:
                            return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                else:
                    return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
            else:
                if q_len <= 14.5000:
                    if q_len <= 10.5000:
                        return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                    else:
                        if q_len <= 11.5000:
                            return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                        else:
                            return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'
                else:
                    return {'action': 'REJECT', 'reason': 'SynthRME VETO: Learned safety rule triggered'}, True, 'Synth_LearnedUnsafe'

        # --- End of Learned Safety Rules ---

        return proposal, False, None
